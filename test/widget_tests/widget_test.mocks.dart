// Mocks generated by Mockito 5.0.17 from annotations
// in advicer/test/widget_tests/widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i7;

import 'package:advicer/application/cubit/advicer_cubit_cubit.dart' as _i3;
import 'package:advicer/application/theme/theme_service.dart' as _i6;
import 'package:advicer/domain/usecases/advicer_usecases.dart' as _i2;
import 'package:bloc/bloc.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAdvicerUsecases_0 extends _i1.Fake implements _i2.AdvicerUsecases {}

class _FakeAdvicerCubitState_1 extends _i1.Fake
    implements _i3.AdvicerCubitState {}

/// A class which mocks [AdvicerCubitCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdvicerCubitCubit extends _i1.Mock implements _i3.AdvicerCubitCubit {
  MockAdvicerCubitCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AdvicerUsecases get adviceUsecases =>
      (super.noSuchMethod(Invocation.getter(#adviceUsecases),
          returnValue: _FakeAdvicerUsecases_0()) as _i2.AdvicerUsecases);
  @override
  _i3.AdvicerCubitState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeAdvicerCubitState_1()) as _i3.AdvicerCubitState);
  @override
  _i4.Stream<_i3.AdvicerCubitState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.AdvicerCubitState>.empty())
          as _i4.Stream<_i3.AdvicerCubitState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i4.Future<void> getAdvice() =>
      (super.noSuchMethod(Invocation.method(#getAdvice, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void emit(_i3.AdvicerCubitState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i5.Change<_i3.AdvicerCubitState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [ThemeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeService extends _i1.Mock implements _i6.ThemeService {
  MockThemeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isDarkModeOn =>
      (super.noSuchMethod(Invocation.getter(#isDarkModeOn), returnValue: false)
          as bool);
  @override
  set isDarkModeOn(bool? _isDarkModeOn) =>
      super.noSuchMethod(Invocation.setter(#isDarkModeOn, _isDarkModeOn),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i4.Future<void> toggleTheme() =>
      (super.noSuchMethod(Invocation.method(#toggleTheme, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> setTheme({bool? darkMode}) => (super.noSuchMethod(
      Invocation.method(#setTheme, [], {#darkMode: darkMode}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void addListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
